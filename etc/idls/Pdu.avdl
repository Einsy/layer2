/**
 * Avro types.
 *
 * We aren't using namespaces here because they aren't handled property by the
 * Avro C++ header generator (they are ignored). This implies that all names
 * must be unique anyway. Maybe fix this in the future.
 *
 */
protocol Pdu {

  // TODO: Edit CPP code generation tool to support namespaces.
  // TODO: Explore using an extend/include keyword to avoid repeating common
  // fields (e.g. 802.11 headers).

  /**
   * Generic PDU type.
   *
   * This type is used when no matching record was found for the received PDU.
   *
   */
  record Unsupported {
    string name;
    bytes data;
  }

  fixed MacAddr(6);

  // Ethernet II

  record Ethernet2 {
    MacAddr srcAddr;
    MacAddr dstAddr;
    int payloadType;
    bytes data;
  }

  // Dot11.

  enum Dot11Capability {
    ESS,
    IBSS,
    CF_POLL,
    CF_POLL_REQ,
    PRIVACY,
    SHORT_PREAMBLE,
    PBCC,
    CHANNEL_AGILITY,
    SPECTRUM_MGMT,
    QOS,
    SST,
    APSD,
    RADIO_MEASUREMENT,
    DSSS_OFDM,
    DELAYED_BLOCK_ACK,
    IMMEDIATE_BLOCK_ACK
  }

  /**
   * Common header for all 802.11 frames.
   *
   * Includes everything but the first address field (to keep it at the same
   * level as the others).
   *
   */
  record Dot11Header {
    boolean toDs;
    boolean fromDs;
    boolean moreFrag;
    boolean retry;
    boolean powerMgmt;
    boolean wep;
    boolean order;
    int durationId;
    MacAddr addr1;
  }

  /**
   * Common header for all 802.11 management frames.
   *
   * Includes everything but the address fields (to keep them at the same level
   * as the others).
   *
   */
  record Dot11MgmtHeader {
    int fragNum;
    int seqNum;
    MacAddr addr2;
    MacAddr addr3;
    MacAddr addr4;
    // TODO: Add more (e.g. SSID), though tin's API currently makes this difficult.
  }

  record Dot11AssocRequest {
    Dot11Header header;
    Dot11MgmtHeader mgmtHeader;
    array<Dot11Capability> capabilities;
    int listenInterval;
  }

  record Dot11AssocResponse {
    Dot11Header header;
    Dot11MgmtHeader mgmtHeader;
    array<Dot11Capability> capabilities;
    int statusCode; // 0: success, 1: failure (make this an enum?).
    int aid;
  }

  record Dot11Authentication {
    Dot11Header header;
    Dot11MgmtHeader mgmtHeader;
    int authAlgorithm;
    int authSeqNumber;
    int statusCode;
  }

  record Dot11Beacon {
    Dot11Header header;
    Dot11MgmtHeader mgmtHeader;
    long timestamp;
    int interval;
    array<Dot11Capability> capabilities;
  }

  record Dot11Deauthentication {
    Dot11Header header;
    Dot11MgmtHeader mgmtHeader;
    int reasonCode;
  }

  record Dot11Disassoc {
    Dot11Header header;
    Dot11MgmtHeader mgmtHeader;
    int reasonCode;
  }

  record Dot11ProbeRequest {
    Dot11Header header;
    Dot11MgmtHeader mgmtHeader;
  }

  record Dot11ProbeResponse {
    Dot11Header header;
    Dot11MgmtHeader mgmtHeader;
    long timestamp;
    int interval;
    array<Dot11Capability> capabilities;
  }

  record Dot11ReassocRequest {
    Dot11Header header;
    Dot11MgmtHeader mgmtHeader;
    array<Dot11Capability> capabilities;
    int listenInterval;
    MacAddr currentAp;
  }

  record Dot11ReassocResponse {
    Dot11Header header;
    Dot11MgmtHeader mgmtHeader;
    array<Dot11Capability> capabilities;
    int statusCode; // 0: success, 1: failure (make this an enum?).
    int aid;
  }

  // Radiotap.

  enum RadiotapChannelType {
    TURBO, CCK, OFDM, TWO_GZ, FIVE_GZ, PASSIVE, DYN_CCK_OFDM, GFSK
  }

  record RadiotapChannel {
    int freq;
    RadiotapChannelType type;
  }

  enum RadiotapFlag {
    CFP,
    PREAMBLE,
    WEP,
    FRAGMENTATION,
    FCS,
    PADDING,
    FAILED_FCS,
    SHORT_GI
  }

  record Radiotap {
    long tsft = 0;
    array<RadiotapFlag> flags;
    int rate = 0;
    union {null, RadiotapChannel} channel = null;
    union {
      null,
      Unsupported,
      Dot11AssocRequest,
      Dot11AssocResponse,
      Dot11Authentication,
      Dot11Beacon,
      Dot11Deauthentication,
      Dot11Disassoc,
      Dot11ProbeRequest,
      Dot11ProbeResponse,
      Dot11ReassocRequest,
      Dot11ReassocResponse
    } pdu = null;
  }

  /**
   * Outermost PDU.
   *
   */
  record Pdu {
    union {
      Unsupported,
      Ethernet2,
      Radiotap
    } pdu;
  }

}
